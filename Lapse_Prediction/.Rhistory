spread(eventpage, value)
lapse.data$tenurenum <- as.numeric(levels(lapse.data$tenurenum))[lapse.data$tenurenum]
lapse.data$tenurenum <- lapse.data$tenurenum + 1
lapse.data$starttime <- lapse.data$tenurenum - 1
lapse.data$endtime <- lapse.data$tenurenum
lapse.data <- lapse.data[!is.na(lapse.data$tenurenum),]
lapse.data[is.na(lapse.data)] <- 0
lapse.data$totalactions <- rowSums(lapse.data[,7:length(lapse.data)])
lapse.cleandata <-
cbind(filterGoodVariables(lapse.data[,c(7:(length(lapse.data)))]),
lastvisitdate = lapse.data$lastvisitdate,
firstvisitdate = lapse.data$firstvisitdate,
tenurenum = lapse.data$tenurenum,
starttime = lapse.data$starttime,
endtime = lapse.data$endtime,
udid = lapse.data$udid)
lapse.cleandata[,1:(length(lapse.cleandata) - 6)] <- ifelse(lapse.cleandata[,1:(length(lapse.cleandata) - 6)] > 0 ,1 ,0)
tempzeros <- merge(unique(lapse.cleandata[c("udid","lastvisitdate","firstvisitdate")]),
cbind(expand.grid(udid = unique(lapse.cleandata$udid), tenurenum = c(9:28)),
data.frame(matrix(0, ncol = length(lapse.cleandata) -6,nrow = length(unique(lapse.cleandata$udid))*20))),
by = "udid")
tempzeros$starttime <- tempzeros$tenurenum - 1
tempzeros$endtime <- tempzeros$tenurenum
tempzeros <- tempzeros[c(5:(length(lapse.cleandata)-2),2,3,4,(length(tempzeros) - 1),length(tempzeros),1)]
colnames(tempzeros) <- colnames(lapse.cleandata)
lapse.cleandata <- rbind(lapse.cleandata,tempzeros)
lapse.cleandata$lapsed = 0
lapse.cleandata[lapse.cleandata$lastvisitdate < as.Date(as.Date("2015-10-07") - 28) &
lapse.cleandata$lastvisitdate ==
lapse.cleandata$firstvisitdate + lapse.cleandata$tenurenum - 1,]$lapsed <- 1
lapse.cleandata <- filter(merge(lapse.cleandata,summarise(group_by(filter(lapse.cleandata,lapsed == 1),udid),max=max(tenurenum)),
by="udid",all.x = TRUE),
tenurenum <= max | is.na(max))[]
survivalResponse <- Surv(lapse.cleandata$starttime,lapse.cleandata$endtime,
lapse.cleandata$lapsed
)
lapse.model1 <- coxph(survivalResponse ~.,
data = lapse.cleandata[,2:(length(lapse.cleandata) - 8)])
summary(lapse.model1)
compareVarSurvData(lapse.model1, lapse.cleandata[,2:(length(lapse.cleandata) - 8)], c("offerview_marketingpushcounts", "coverflow_coverflowimpressioncounts"),
1) %>% melt("time") %>%
ggplot(aes(x = time, y = value, colour = variable)) + geom_line(size = 1.2) + theme_bw() +
scale_y_continuous(labels = percent, name = "Survival Probability") + scale_x_continuous(name = "Days after First Launch") +
scale_colour_manual(name = "Number actions in first 28 days", values = c("#756bb1","#9ecae1"))
goodColumns <-
lapse.data %>%
colwise(sum)(.) %>%
melt(data=.) %>%
filter(value!=0) %>%
select(variable)
lapse.data %>%
colwise(sum)(.) %>%  head
goodColumns <-
lapse.data[,c(7:(length(lapse.data)))] %>%
colwise(sum)(.) %>%
melt(data=.) %>%
filter(value!=0) %>%
select(variable)
goodColumns
goodColumns <-
lapse.data[,c(7:(length(lapse.data)))] %>%
colwise(sum)(.)
goodColumns
rm(goodColumns)
lapse.data <-
dbGetQuery(redshift,
"
select udid,lastvisitdate,firstvisitdate,pagetype, firstvisitdate - date('2015-04-09') as starttime
, lastvisitdate - date('2015-04-09') as endtime, tenurenum
, sum(case when eventtype = 'pageView' then count else 0 end) as pageviewcounts
, sum(case when eventtype = 'coverflowImpression' then count else 0 end) as coverflowimpressioncounts
, sum(case when eventtype = 'coverFlow' then count else 0 end) as coverflowcounts
, sum(case when eventtype = 'outClick' then count else 0 end) as outclickcounts
, sum(case when eventtype = 'offerTap' then count else 0 end) as offertapcounts
, sum(case when eventtype = 'marketing_push_open' then count else 0 end) as marketingpushcounts
, sum(case when eventtype = 'geofence_push_open' then count else 0 end) as geofencepushcounts
from (
with t1 as (
select *, rank() over (order by random()) as rank from (
select distinct udid, lastvisitdate, firstvisitdate
from bi_work.jj_app_lapse_predictions
where firstvisitdate <= '9/2/2015'
) x
)
,t2 as (
select udid,lastvisitdate,firstvisitdate, tenurenum
,case when eventtype in ('coverflowImpression','coverFlow')then 'coverflow'  when eventtype = 'outClick' then null else pagetype end as pagetype
,eventtype
, contenttype
, count
from bi_work.jj_app_lapse_predictions_v02
where ((eventtype = 'pageView' and pagetype is not null) or (eventtype in ('coverflowImpression','coverFlow','outClick','offerTap'))
or eventtype in ('marketing_push_open','geofence_push_open')) or eventtype is null
)
select a.udid, a.lastvisitdate, a.firstvisitdate, tenurenum, pagetype, eventtype, contenttype, count
from t1 a
left join t2 b using(udid)
where rank <= 100000
) x
group by 1,2,3,4,5,6,7
;")
lapse.data[,c(7:(length(lapse.data)))] %>%
colwise(sum)(.)
lapse.data[,c(7:(length(lapse.data)))] %>% group_by(pagetype) %>%
colwise(sum)(.)
lapse.data[,c(4,7:(length(lapse.data)))] %>% group_by(pagetype) %>%
colwise(sum)(.)
lapse.data[,c(4,7:(length(lapse.data)))] %>% filter(pagetype == "category") %>%
colwise(sum)(.)
lapse.data[lapse.data$pagetype == "category",c(4,7:(length(lapse.data)))] %>%
colwise(sum)(.)
lapse.data[lapse.data$pagetype == "category",c(7:(length(lapse.data)))] %>%
colwise(sum)(.)
lapse.data[lapse.data$pagetype == "category",c(7:(length(lapse.data)))][1:10,]
lapse.data[is.na(lapse.data$tenurenum),"udid"]
lapse.data[is.na(lapse.data$tenurenum),"udid"][1,]
lapse.data[is.na(lapse.data$tenurenum),"udid"][1]
lapse.data <-
lapse.data %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","tenurenum"),
variable.name = "eventtype") %>%
filter(!(eventtype == "pageviewcounts" & pagetype != "storepage" ))%>%
filter(!(eventtype == "offertapcounts" & pagetype == "offerview")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "favorites")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "jfy")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "products")) %>%
spread(tenurenum, value) %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","eventtype"),
variable.name = "tenurenum") %>%
unite(eventpage,pagetype, eventtype) %>% filter(!is.na(tenurenum)) %>%
spread(eventpage, value)
lasep.data[lapse.data$udid == "80B9408F-3F05-4861-8531-A24E5479859F",]
laspe.data[lapse.data$udid == "80B9408F-3F05-4861-8531-A24E5479859F",]
lapse.data[lapse.data$udid == "80B9408F-3F05-4861-8531-A24E5479859F",]
lapse.data$tenurenum <- as.numeric(levels(lapse.data$tenurenum))[lapse.data$tenurenum]
lapse.data$tenurenum <- lapse.data$tenurenum + 1
lapse.data$starttime <- lapse.data$tenurenum - 1
lapse.data$endtime <- lapse.data$tenurenum
lapse.data[lapse.data$udid == "80B9408F-3F05-4861-8531-A24E5479859F",]
lapse.data <- lapse.data[!is.na(lapse.data$tenurenum),]
lapse.data[lapse.data$udid == "80B9408F-3F05-4861-8531-A24E5479859F",]
lapse.data[is.na(lapse.data)] <- 0
lapse.data <-
dbGetQuery(redshift,
"
select udid,lastvisitdate,firstvisitdate,pagetype, firstvisitdate - date('2015-04-09') as starttime
, lastvisitdate - date('2015-04-09') as endtime, tenurenum
, sum(case when eventtype = 'pageView' then count else 0 end) as pageviewcounts
, sum(case when eventtype = 'coverflowImpression' then count else 0 end) as coverflowimpressioncounts
, sum(case when eventtype = 'coverFlow' then count else 0 end) as coverflowcounts
, sum(case when eventtype = 'outClick' then count else 0 end) as outclickcounts
, sum(case when eventtype = 'offerTap' then count else 0 end) as offertapcounts
, sum(case when eventtype = 'marketing_push_open' then count else 0 end) as marketingpushcounts
, sum(case when eventtype = 'geofence_push_open' then count else 0 end) as geofencepushcounts
from (
with t1 as (
select *, rank() over (order by random()) as rank from (
select distinct udid, lastvisitdate, firstvisitdate
from bi_work.jj_app_lapse_predictions
where firstvisitdate <= '10/7/2015'
) x
)
,t2 as (
select udid,lastvisitdate,firstvisitdate, tenurenum
,case when eventtype in ('coverflowImpression','coverFlow')then 'coverflow'  when eventtype = 'outClick' then null else pagetype end as pagetype
,eventtype
, contenttype
, count
from bi_work.jj_app_lapse_predictions_v02
where ((eventtype = 'pageView' and pagetype is not null) or (eventtype in ('coverflowImpression','coverFlow','outClick','offerTap'))
or eventtype in ('marketing_push_open','geofence_push_open')) or eventtype is null
)
select a.udid, a.lastvisitdate, a.firstvisitdate, tenurenum, pagetype, eventtype, contenttype, count
from t1 a
left join t2 b using(udid)
where rank <= 10000
) x
group by 1,2,3,4,5,6,7
;")
rm(tempzeros)
rm(plot.data)
rm(ranks)
library(survival)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RODBC)
library(RJDBC)
library(RPostgreSQL)
library(tidyr)
library(lubridate)
library(rmarkdown)
library(scales)
source("lapse_survival_functions.R")
drv <- dbDriver("PostgreSQL")
redshift = dbConnect(drv,host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
lapse.data <-
dbGetQuery(redshift,
"
select udid,lastvisitdate,firstvisitdate,pagetype, firstvisitdate - date('2015-04-09') as starttime
, lastvisitdate - date('2015-04-09') as endtime, tenurenum
, sum(case when eventtype = 'pageView' then count else 0 end) as pageviewcounts
, sum(case when eventtype = 'coverflowImpression' then count else 0 end) as coverflowimpressioncounts
, sum(case when eventtype = 'coverFlow' then count else 0 end) as coverflowcounts
, sum(case when eventtype = 'outClick' then count else 0 end) as outclickcounts
, sum(case when eventtype = 'offerTap' then count else 0 end) as offertapcounts
, sum(case when eventtype = 'marketing_push_open' then count else 0 end) as marketingpushcounts
, sum(case when eventtype = 'geofence_push_open' then count else 0 end) as geofencepushcounts
from (
with t1 as (
select *, rank() over (order by random()) as rank from (
select distinct udid, lastvisitdate, firstvisitdate
from bi_work.jj_app_lapse_predictions_v02) x
)
,t2 as (
select udid,lastvisitdate,firstvisitdate, tenurenum
,case when eventtype in ('coverflowImpression','coverFlow')then 'coverflow'  when eventtype = 'outClick' then null else pagetype end as pagetype
,eventtype
, contenttype
, count
from bi_work.jj_app_lapse_predictions_v02
where ((eventtype = 'pageView' and pagetype is not null) or (eventtype in ('coverflowImpression','coverFlow','outClick','offerTap'))
or eventtype in ('marketing_push_open','geofence_push_open')) or eventtype is null
)
select a.udid, a.lastvisitdate, a.firstvisitdate, tenurenum, pagetype, eventtype, contenttype, count
from t1 a
left join t2 b using(udid)
where rank <= 10000
) x
group by 1,2,3,4,5,6,7
;")
lapse.data <-
lapse.data %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","tenurenum"),
variable.name = "eventtype") %>%
filter(!(eventtype == "pageviewcounts" & pagetype != "storepage" ))%>%
filter(!(eventtype == "offertapcounts" & pagetype == "offerview")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "favorites")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "jfy")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "products")) %>%
spread(tenurenum, value) %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","eventtype"),
variable.name = "tenurenum") %>%
unite(eventpage,pagetype, eventtype) %>% filter(!is.na(tenurenum)) %>%
spread(eventpage, value)
lapse.data$tenurenum <- as.numeric(levels(lapse.data$tenurenum))[lapse.data$tenurenum]
lapse.data$tenurenum <- lapse.data$tenurenum + 1
lapse.data$starttime <- lapse.data$tenurenum - 1
lapse.data$endtime <- lapse.data$tenurenum
lapse.data <- lapse.data[!is.na(lapse.data$tenurenum),]
lapse.data[is.na(lapse.data)] <- 0
lapse.data$totalactions <- rowSums(lapse.data[,7:length(lapse.data)])
lapse.cleandata <-
cbind(filterGoodVariables(lapse.data[,c(7:(length(lapse.data)))]),
lastvisitdate = lapse.data$lastvisitdate,
firstvisitdate = lapse.data$firstvisitdate,
tenurenum = lapse.data$tenurenum,
starttime = lapse.data$starttime,
endtime = lapse.data$endtime,
udid = lapse.data$udid)
unique(lapse.cleandata$tenurenum)
lapse.cleandata[,1:(length(lapse.cleandata) - 6)] <- ifelse(lapse.cleandata[,1:(length(lapse.cleandata) - 6)] > 0 ,1 ,0)
length(unique(lapse.cleandata$udid))
lapse.cleandata$lapsed = 0
lapse.cleandata[lapse.cleandata$lastvisitdate < as.Date(as.Date("2015-11-22") - 29) &
lapse.cleandata$lastvisitdate ==
lapse.cleandata$firstvisitdate + lapse.cleandata$tenurenum - 1,]$lapsed <- 1
lapse.cleandata <- filter(merge(lapse.cleandata,summarise(group_by(filter(lapse.cleandata,lapsed == 1),udid),max=max(tenurenum)),
by="udid",all.x = TRUE),
tenurenum <= max | is.na(max))[]
survivalResponse <- Surv(lapse.cleandata$starttime,lapse.cleandata$endtime,
lapse.cleandata$lapsed
)
colnames(lapse.cleandata)
lapse.model1 <- coxph(survivalResponse ~ offerview_marketingpushcounts + offerview_marketingpushcounts:endtime +
category_offertapcounts + category_offertapcou,
data = lapse.cleandata[,2:(length(lapse.cleandata) - 8)])
lapse.model1 <- coxph(survivalResponse ~.,
data = lapse.cleandata[,2:(length(lapse.cleandata) - 8)])
summary(lapse.model1)
lapse.data <-
dbGetQuery(redshift,
"
select udid,lastvisitdate,firstvisitdate,pagetype, firstvisitdate - date('2015-04-09') as starttime
, lastvisitdate - date('2015-04-09') as endtime, tenurenum
, sum(case when eventtype = 'pageView' then count else 0 end) as pageviewcounts
, sum(case when eventtype = 'coverflowImpression' then count else 0 end) as coverflowimpressioncounts
, sum(case when eventtype = 'coverFlow' then count else 0 end) as coverflowcounts
, sum(case when eventtype = 'outClick' then count else 0 end) as outclickcounts
, sum(case when eventtype = 'offerTap' then count else 0 end) as offertapcounts
, sum(case when eventtype = 'marketing_push_open' then count else 0 end) as marketingpushcounts
, sum(case when eventtype = 'geofence_push_open' then count else 0 end) as geofencepushcounts
from (
with t1 as (
select *, rank() over (order by random()) as rank from (
select distinct udid, lastvisitdate, firstvisitdate
from bi_work.jj_app_lapse_predictions_v02
where firstvisitdate < current_date - 28) x
)
,t2 as (
select udid,lastvisitdate,firstvisitdate, tenurenum
,case when eventtype in ('coverflowImpression','coverFlow') then 'coverflow'  when eventtype = 'outClick' then null else pagetype end as pagetype
,eventtype
, contenttype
, count
from bi_work.jj_app_lapse_predictions_v02
where ((eventtype = 'pageView' and pagetype is not null) or (eventtype in ('coverflowImpression','coverFlow','outClick','offerTap'))
or eventtype in ('marketing_push_open','geofence_push_open')) or eventtype is null
)
select a.udid, a.lastvisitdate, a.firstvisitdate, tenurenum, pagetype, eventtype, contenttype, count
from t1 a
left join t2 b using(udid)
where rank <= 10000
) x
group by 1,2,3,4,5,6,7
;")
unique(lapse.data[,c("pagetype","eventtype")])
unique(lapse.data[,c(4,8:14)])
unique(lapse.data[,4])
lapse.data %>% group_by(eventtype) %>% summarise(counts = sum(marketingpushcounts))
lapse.data %>% group_by(pagetype) %>% summarise(counts = sum(marketingpushcounts))
lapse.data %>% group_by(pagetype) %>% summarise(counts = sum(pageviewcounts))
length(unique(lapse.data$udid))
lapse.data <-
dbGetQuery(redshift,
"
select udid,lastvisitdate,firstvisitdate,pagetype, firstvisitdate - date('2015-04-09') as starttime
, lastvisitdate - date('2015-04-09') as endtime, tenurenum
, sum(case when eventtype = 'pageView' then count else 0 end) as pageviewcounts
, sum(case when eventtype = 'coverflowImpression' then count else 0 end) as coverflowimpressioncounts
, sum(case when eventtype = 'coverFlow' then count else 0 end) as coverflowcounts
, sum(case when eventtype = 'outClick' then count else 0 end) as outclickcounts
, sum(case when eventtype = 'offerTap' then count else 0 end) as offertapcounts
, sum(case when eventtype = 'marketing_push_open' then count else 0 end) as marketingpushcounts
, sum(case when eventtype = 'geofence_push_open' then count else 0 end) as geofencepushcounts
from (
with t1 as (
select *, rank() over (order by random()) as rank from (
select distinct udid, lastvisitdate, firstvisitdate
from bi_work.jj_app_lapse_predictions_v02
where firstvisitdate < current_date - 28) x
)
,t2 as (
select udid,lastvisitdate,firstvisitdate, tenurenum
,case when eventtype in ('coverflowImpression','coverFlow') then 'coverflow'  when eventtype = 'outClick' then null else pagetype end as pagetype
,eventtype
, contenttype
, count
from bi_work.jj_app_lapse_predictions_v02
where ((eventtype = 'pageView' and pagetype is not null) or (eventtype in ('coverflowImpression','coverFlow','outClick','offerTap'))
or eventtype in ('marketing_push_open','geofence_push_open')) or eventtype is null
)
select a.udid, a.lastvisitdate, a.firstvisitdate, tenurenum, pagetype, eventtype, contenttype, count
from t1 a
left join t2 b using(udid)
where rank <= 20000
) x
group by 1,2,3,4,5,6,7
;")
lapse.data <-
lapse.data %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","tenurenum"),
variable.name = "eventtype") %>%
filter(!(eventtype == "offertapcounts" & pagetype == "offerview")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "favorites")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "jfy")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "products")) %>%
spread(tenurenum, value) %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","eventtype"),
variable.name = "tenurenum") %>%
unite(eventpage,pagetype, eventtype) %>% filter(!is.na(tenurenum)) %>%
spread(eventpage, value)
!is.na(lapse.data$category_pageviewcounts)[1:5]
lapse.data$tenurenum <- as.numeric(levels(lapse.data$tenurenum))[lapse.data$tenurenum]
unique(lapse.data$tenurenume)
unique(lapse.data$tenurenum)
lapse.data$tenurenum <- lapse.data$tenurenum + 1
unique(lapse.data$tenurenum)
lapse.data[is.na(lapse.data$tenurenume),1]
lapse.data[is.na(lapse.data$tenurenum),1]
nrow(lapse.data[is.na(lapse.data$tenurenum),1])
length(lapse.data[is.na(lapse.data$tenurenum),1])
lapse.data$starttime <- lapse.data$tenurenum - 1
lapse.data$endtime <- lapse.data$tenurenum
lapse.data <- lapse.data[!is.na(lapse.data$tenurenum),]
unique(lapse.data$tenurenume)
unique(lapse.data$tenurenum)
!is.na(lapse.data$category_pageviewcounts)[1:5]
lapse.data[!is.na(lapse.data$category_pageviewcounts),][1:5]
lapse.data[!is.na(lapse.data$category_pageviewcounts),][1:5,]
lapse.data <-
dbGetQuery(redshift,
"
select udid,lastvisitdate,firstvisitdate,pagetype, firstvisitdate - date('2015-04-09') as starttime
, lastvisitdate - date('2015-04-09') as endtime, tenurenum
, sum(case when eventtype = 'pageView' then count else 0 end) as pageviewcounts
, sum(case when eventtype = 'coverflowImpression' then count else 0 end) as coverflowimpressioncounts
, sum(case when eventtype = 'coverFlow' then count else 0 end) as coverflowcounts
, sum(case when eventtype = 'outClick' then count else 0 end) as outclickcounts
, sum(case when eventtype = 'offerTap' then count else 0 end) as offertapcounts
, sum(case when eventtype = 'marketing_push_open' then count else 0 end) as marketingpushcounts
, sum(case when eventtype = 'geofence_push_open' then count else 0 end) as geofencepushcounts
from (
with t1 as (
select *, rank() over (order by random()) as rank from (
select distinct udid, lastvisitdate, firstvisitdate
from bi_work.jj_app_lapse_predictions_v02
where firstvisitdate < current_date - 28) x
)
,t2 as (
select udid,lastvisitdate,firstvisitdate, tenurenum
,case when eventtype in ('coverflowImpression','coverFlow') then 'coverflow'  when eventtype = 'outClick' then null else pagetype end as pagetype
,eventtype
, contenttype
, count
from bi_work.jj_app_lapse_predictions_v02
where ((eventtype = 'pageView' and pagetype is not null) or (eventtype in ('coverflowImpression','coverFlow','outClick','offerTap'))
or eventtype in ('marketing_push_open','geofence_push_open')) or eventtype is null
)
select a.udid, a.lastvisitdate, a.firstvisitdate, tenurenum, pagetype, eventtype, contenttype, count
from t1 a
left join t2 b using(udid)
where rank <= 20000
) x
group by 1,2,3,4,5,6,7
;")
lapse.dataoriginal <- lapse.data
lapse.data <-
lapse.data %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","tenurenum"),
variable.name = "eventtype") %>%
filter(!(eventtype == "offertapcounts" & pagetype == "offerview")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "favorites")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "jfy")) %>%
filter(!(eventtype == "offertapcounts" & pagetype == "products")) %>%
spread(tenurenum, value) %>%
melt(c("udid","lastvisitdate","firstvisitdate","pagetype","starttime","endtime","eventtype"),
variable.name = "tenurenum") %>%
unite(eventpage,pagetype, eventtype) %>% filter(!is.na(tenurenum)) %>%
spread(eventpage, value)
lapse.data$tenurenum <- as.numeric(levels(lapse.data$tenurenum))[lapse.data$tenurenum]
lapse.data$tenurenum <- lapse.data$tenurenum + 1
lapse.data$starttime <- lapse.data$tenurenum - 1
lapse.data$endtime <- lapse.data$tenurenum
lapse.data <- lapse.data[!is.na(lapse.data$tenurenum),]
lapse.data[is.na(lapse.data)] <- 0
lapse.data$totalactions <- rowSums(lapse.data[,7:length(lapse.data)])
lapse.cleandata <-
cbind(filterGoodVariables(lapse.data[,c(7:(length(lapse.data)))]),
lastvisitdate = lapse.data$lastvisitdate,
firstvisitdate = lapse.data$firstvisitdate,
tenurenum = lapse.data$tenurenum,
starttime = lapse.data$starttime,
endtime = lapse.data$endtime,
udid = lapse.data$udid)
lapse.cleandata[,1:(length(lapse.cleandata) - 6)] <- ifelse(lapse.cleandata[,1:(length(lapse.cleandata) - 6)] > 0 ,1 ,0)
lapse.cleandata$lapsed = 0
lapse.cleandata[lapse.cleandata$lastvisitdate < as.Date(as.Date("2015-11-22") - 29) &
lapse.cleandata$lastvisitdate ==
lapse.cleandata$firstvisitdate + lapse.cleandata$tenurenum - 1,]$lapsed <- 1
lapse.cleandata <- filter(merge(lapse.cleandata,summarise(group_by(filter(lapse.cleandata,lapsed == 1),udid),max=max(tenurenum)),
by="udid",all.x = TRUE),
tenurenum <= max | is.na(max))[]
lapse.cleandata <-
cbind(filterGoodVariables(lapse.data[,c(7:(length(lapse.data)))]),
lastvisitdate = lapse.data$lastvisitdate,
firstvisitdate = lapse.data$firstvisitdate,
tenurenum = lapse.data$tenurenum,
starttime = lapse.data$starttime,
endtime = lapse.data$endtime,
udid = lapse.data$udid)
lapse.cleandata[,1:(length(lapse.cleandata) - 6)] <- ifelse(lapse.cleandata[,1:(length(lapse.cleandata) - 6)] > 0 ,1 ,0)
apse.cleandata$lapsed = 0
lapse.cleandata[lapse.cleandata$lastvisitdate < as.Date(as.Date("2015-11-22") - 29) &
lapse.cleandata$lastvisitdate ==
lapse.cleandata$firstvisitdate + lapse.cleandata$tenurenum - 1,]$lapsed <- 1
lapse.cleandata <-
cbind(filterGoodVariables(lapse.data[,c(7:(length(lapse.data)))]),
lastvisitdate = lapse.data$lastvisitdate,
firstvisitdate = lapse.data$firstvisitdate,
tenurenum = lapse.data$tenurenum,
starttime = lapse.data$starttime,
endtime = lapse.data$endtime,
udid = lapse.data$udid)
lapse.cleandata[,1:(length(lapse.cleandata) - 6)] <- ifelse(lapse.cleandata[,1:(length(lapse.cleandata) - 6)] > 0 ,1 ,0)
# tempzeros <- merge(unique(lapse.cleandata[c("udid","lastvisitdate","firstvisitdate")]),
#   cbind(expand.grid(udid = unique(lapse.cleandata$udid), tenurenum = c(9:28)),
#         data.frame(matrix(0, ncol = length(lapse.cleandata) -6,nrow = length(unique(lapse.cleandata$udid))*20))),
#   by = "udid")
#
# tempzeros$starttime <- tempzeros$tenurenum - 1
# tempzeros$endtime <- tempzeros$tenurenum
#
# tempzeros <- tempzeros[c(5:(length(lapse.cleandata)-2),2,3,4,(length(tempzeros) - 1),length(tempzeros),1)]
#
# colnames(tempzeros) <- colnames(lapse.cleandata)
#
# lapse.cleandata <- rbind(lapse.cleandata,tempzeros)
lapse.cleandata$lapsed = 0
lapse.cleandata[lapse.cleandata$lastvisitdate < as.Date(as.Date("2015-11-22") - 29) &
lapse.cleandata$lastvisitdate ==
lapse.cleandata$firstvisitdate + lapse.cleandata$tenurenum - 1,]$lapsed <- 1
lapse.cleandata <- filter(merge(lapse.cleandata,summarise(group_by(filter(lapse.cleandata,lapsed == 1),udid),max=max(tenurenum)),
by="udid",all.x = TRUE),
tenurenum <= max | is.na(max))[]
survivalResponse <- Surv(lapse.cleandata$starttime,lapse.cleandata$endtime,
lapse.cleandata$lapsed
)
lapse.model1 <- coxph(survivalResponse ~.,
data = lapse.cleandata[,2:(length(lapse.cleandata) - 8)])
summary(lapse.model1)
